# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CarbonEngine Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  # Execute Build operations and upload CarbonEngine zip to artifacts directory
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Read Version File
      run: |
          chcp 65001
          $VERSION = Get-Content -path ./version.txt
          Write-Output $VERSION
          "$VERSION" >> $env:GITHUB_ENV

    - name: Echo Version
      run: |
        Write-Output $env:VERSION

  #   - name: Configure CMake
  #     # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
  #     # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
  #     run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

  #   - name: Build
  #     # Build your program with the given configuration
  #     run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  #   - name: Pack Installer
  #     run: cpack 
  #     shell: bash
  #     working-directory: ./build

  #   - name: Move Version File
  #     run: mv ./version.txt ./build/packages/version.txt

  #   - name: Upload Artifact
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: CarbonEngine
  #       path: build/packages/*

  # release:
  #   permissions: write-all
  #   runs-on: windows-latest
  #   needs: build
  #   steps:
  #     - name: Download Artifact
  #       uses: actions/download-artifact@v4
  #       with: 
  #         name: CarbonEngine
  #         path: ./

  #     - name: List Directory Contents
  #       run: ls

  #     - name: Read Version File
  #       run: |
  #         ech "(VERSION=" Get-Content -path ./version.txt) >> $env:GITHUB_ENV

  #     - name: Echo Version
  #       run: echo $env:VERSION
      
  #     - name: Create Release
  #       id: create-release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ env.version }}
  #         release_name: Release ${{ env.version }}
  #         draft: false
  #         prerelease: true

  #     - name: Package Release
  #       run: Compress-Archive -Path ./* -Destination ./CarbonEngine.zip

  #     - name: Upload Release
  #       id: upload-release
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create-release.outputs.upload_url }}
  #         asset_path: ./CarbonEngine.zip
  #         asset_name: CarbonEngine.zip
  #         asset_content_type: applications/zip
    
    
    
  
  
